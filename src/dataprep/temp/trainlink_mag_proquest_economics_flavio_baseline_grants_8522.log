Namespace(testing=False, verbose=1, field=['economics'], train_name='flavio_baseline', startyear=1985, endyear=2022, mergemode='1:1', recall=0.9, institution='True', fieldofstudy_cat='False', fieldofstudy_str='False', keywords='False', retrain='True', linking_type='grants')
Have max 6 cores available
Testing is False 

> /home/flavio/projects/mag_sample/src/dataprep/main/link/train_link_mag_proquest.py(10)<module>()
-> print("finished setup ... ", flush=True)
(Pdb) '\n    SELECT f.AuthorId\n        , f.year\n        , f.firstname\n        , f.lastname\n        , CASE TRIM(SUBSTR(f.middle_lastname, 1, f.l_fullname - f.l_firstname - f.l_lastname - 1)) \n            WHEN \n                "" THEN NULL \n                ELSE TRIM(SUBSTR(f.middle_lastname, 1, f.l_fullname - f.l_firstname - f.l_lastname - 1)) \n            END as middlename \n            -- ## NOTE this gives "" for middlename when it is missing \n        , f.fieldofstudy\n        , g.keywords\n        , g.coauthors\n        , g.institution\n    FROM (\n        SELECT a.AuthorId\n            , a.YearFirstPub AS year\n            , a.FirstName AS firstname\n            , REPLACE(b.NormalizedName, RTRIM(b.NormalizedName, REPLACE(b.NormalizedName, " ", "")), "") AS lastname \n                    -- https://stackoverflow.com/questions/21388820/how-to-get-the-last-index-of-a-substring-in-sqlite\n            , TRIM(SUBSTR(b.NormalizedName, length(a.FirstName) + 1)) AS middle_lastname \n                    -- this gives all except the first name \n            , length(b.NormalizedName) as l_fullname \n            , length(a.FirstName) as l_firstname\n            , length(REPLACE(b.NormalizedName, RTRIM(b.NormalizedName, REPLACE(b.NormalizedName, " ", "")), "")) as l_lastname\n            , e.NormalizedName AS fieldofstudy\n        FROM author_sample AS a\n        INNER JOIN (\n            SELECT AuthorId, NormalizedName\n            FROM Authors\n        ) AS b USING(AuthorId)\n        INNER JOIN (\n            -- ## mark: different from linking graduates. filter on field0\n            SELECT AuthorId, NormalizedName\n            FROM author_fields c\n            INNER JOIN (\n                SELECT FieldOfStudyId, NormalizedName\n                FROM FieldsOfStudy\n            ) AS d USING(FieldOfStudyId)\n            WHERE FieldClass = \'main\'\n                AND FieldOfStudyId IN (?)\n        ) AS e USING(AuthorId)\n    ) f\n    LEFT JOIN (\n        SELECT AuthorId\n                , institutions_career as institution\n                , coauthors\n                , keywords\n        FROM author_info_linking\n    ) AS g USING(AuthorId)\n    INNER JOIN (\n        SELECT AuthorId\n        FROM current_links\n    ) AS f USING(AuthorId)\n    WHERE length(firstname) > 1 AND year >= 1985 - 5 AND year <= 2022 + 5 \n    '
(Pdb) 
    SELECT f.AuthorId
        , f.year
        , f.firstname
        , f.lastname
        , CASE TRIM(SUBSTR(f.middle_lastname, 1, f.l_fullname - f.l_firstname - f.l_lastname - 1)) 
            WHEN 
                "" THEN NULL 
                ELSE TRIM(SUBSTR(f.middle_lastname, 1, f.l_fullname - f.l_firstname - f.l_lastname - 1)) 
            END as middlename 
            -- ## NOTE this gives "" for middlename when it is missing 
        , f.fieldofstudy
        , g.keywords
        , g.coauthors
        , g.institution
    FROM (
        SELECT a.AuthorId
            , a.YearFirstPub AS year
            , a.FirstName AS firstname
            , REPLACE(b.NormalizedName, RTRIM(b.NormalizedName, REPLACE(b.NormalizedName, " ", "")), "") AS lastname 
                    -- https://stackoverflow.com/questions/21388820/how-to-get-the-last-index-of-a-substring-in-sqlite
            , TRIM(SUBSTR(b.NormalizedName, length(a.FirstName) + 1)) AS middle_lastname 
                    -- this gives all except the first name 
            , length(b.NormalizedName) as l_fullname 
            , length(a.FirstName) as l_firstname
            , length(REPLACE(b.NormalizedName, RTRIM(b.NormalizedName, REPLACE(b.NormalizedName, " ", "")), "")) as l_lastname
            , e.NormalizedName AS fieldofstudy
        FROM author_sample AS a
        INNER JOIN (
            SELECT AuthorId, NormalizedName
            FROM Authors
        ) AS b USING(AuthorId)
        INNER JOIN (
            -- ## mark: different from linking graduates. filter on field0
            SELECT AuthorId, NormalizedName
            FROM author_fields c
            INNER JOIN (
                SELECT FieldOfStudyId, NormalizedName
                FROM FieldsOfStudy
            ) AS d USING(FieldOfStudyId)
            WHERE FieldClass = 'main'
                AND FieldOfStudyId IN (?)
        ) AS e USING(AuthorId)
    ) f
    LEFT JOIN (
        SELECT AuthorId
                , institutions_career as institution
                , coauthors
                , keywords
        FROM author_info_linking
    ) AS g USING(AuthorId)
    INNER JOIN (
        SELECT AuthorId
        FROM current_links
    ) AS f USING(AuthorId)
    WHERE length(firstname) > 1 AND year >= 1985 - 5 AND year <= 2022 + 5 
    
(Pdb) 
        SELECT a.GrantID, a.Position, SUBSTR(a.Award_AwardEffectiveDate, 7, 4) as Year
            , b.*, c.*
        FROM NSF_MAIN as a 
        INNER JOIN (
            SELECT GrantID, Position, Name 
            FROM NSF_Institution
        ) b 
        USING (GrantID, Position)
        INNER JOIN (
            SELECT GrantID, Position, Firstname, LastName, PIFullName
            FROM NSF_Investigator
            WHERE RoleCode = 'Principal Investigator'
        ) c
        USING (GrantID, Position)
        WHERE AWARD_TranType = "Grant" AND AWARD_Agency = 'NSF' 
        
(Pdb) Traceback (most recent call last):
  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "/home/flavio/projects/mag_sample/src/dataprep/main/link/train_link_mag_proquest.py", line 10, in <module>
    print("finished setup ... ", flush=True)
  File "/home/flavio/projects/mag_sample/src/dataprep/main/link/train_link_mag_proquest.py", line 10, in <module>
    print("finished setup ... ", flush=True)
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
